def is_valid_placement(grid, row, col, size, direction):    """Check if a ship of given size and direction can be placed at (row, col)."""    if direction == "horizontal":        if col + size > len(grid):  # Check out-of-bounds            return False        for i in range(size):            if grid[row][col + i] != "-":                return False    elif direction == "vertical":        if row + size > len(grid):  # Check out-of-bounds            return False        for i in range(size):            if grid[row + i][col] != "-":                return False    return Truedef backtrack(grid, ships):    """Recursive backtracking function to place ships."""    if not ships:  # Base case: All ships are placed successfully        return True   def exact_algorithm(grid, ships, hits, misses):    moves=0    """Main function for the exact algorithm using backtracking."""    # Start from the initial grid with already placed ships    if backtrack(grid, ships):        print("Optimal solution found.")       # Update the grid with hits and misses for visualization    for i in range(len(grid)):        for j in range(len(grid)):            if grid[i][j] == "S":                hits.append((i, j))                grid[i][j] = "H"            else:                misses.append((i, j))                grid[i][j] = "M"            moves+=1                          return moves   